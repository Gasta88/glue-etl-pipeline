# region MAIN_SETTINGS

default:
  image: 228718274899.dkr.ecr.us-east-1.amazonaws.com/docebo-ai/python-3.6-glueetl:latest

  tags:
    - ai-runner-pool

stages:
  - check
  - unit-tests
  - integration-tests
  - deploy
  - doc

variables:
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: "/certs"
  AWS_SDK_LOAD_CONFIG: "false"
  TERRAFORM_VERSION: "0.14.6"

# endregion MAIN_SETTINGS

# region TEMPLATES

.poetry_template: &poetry_template
  - export PATH=$PATH:../../../root/poetry/bin
  - python -m venv .venv
  - source .venv/bin/activate
  - poetry debug info
  - poetry config --list
  - poetry run pip install --upgrade pip
  - poetry install -n -v

# endregion TEMPLATES

# static python code analysis with pylint (pipeline will fail if quality is lower than expected one)
black:
  only:
    - master
    - auto-merge
    - syntax-check
  stage: check
  before_script:
    - *poetry_template
  script:
    - poetry run black --check --diff shape_dvaults_etl

# check terraform file quality
terraform:
  only:
    - master
    - auto-merge
    - syntax-check
  stage: check
  script:
    - cd deployments
    - terraform init
    - terraform workspace select dev || terraform workspace new dev
    - terraform fmt -check
    - terraform validate

# run terraform unit tests
terraform_unit_test:
  only:
    - master
    - auto-merge
    - unit-test
  stage: unit-tests
  script:
    - cd deployments
    - terraform init
    - terraform workspace select dev || terraform workspace new dev
    - terraform plan -out=plan.out
    - terraform show -json plan.out > plan.json
    - cd ../test/unit_tests
    - python -m unittest check_terraform_plan.py

# run python unit tests
python_unit_test:
  only:
    - master
    - auto-merge
    - unit-test
  stage: unit-tests
  before_script:
    - *poetry_template
  script:
    - python -m unittest discover -s test/unit_tests

# run end-to-end tests
e2e_test:
  only:
    - master
    - auto-merge
    - e2e-test
  stage: integration-tests
  before_script:
    - *poetry_template
  script:
    - cd deployments
    - terraform init
    - terraform workspace select dev || terraform workspace new dev
    - terraform apply --auto-approve --parallelism=1
    - cd ../test/end_to_end_tests
    - python run_e2e_test.py
  after_script:
    - cd deployments
    - terraform destroy --auto-approve
