# region MAIN_SETTINGS

default:
  image: amazon/aws-glue-libs:glue_libs_1.0.0_image_01

  tags:
    - ai-runner-pool

stages:
  - check
  - test
  - doc

variables:
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: "/certs"
  AWS_SDK_LOAD_CONFIG: "false"
  TERRAFORM_VERSION: "0.14.6"

# endregion MAIN_SETTINGS

# region TEMPLATES

.poetry_template: &poetry_template
  before_script:
    - export CONFIG_CACHE_DURATION=0.5
    - export POETRY_VERSION=1.1.11
    - export POETRY_HOME=./poetry
    - export PATH=$PATH:./poetry/bin
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
    - python -m venv .venv
    - source .venv/bin/activate
    - poetry debug info
    - poetry config --list
    - poetry install -n -v

# template to install terraform binaries
.terraform_install_template: &terraform_install_template
  - wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -O /tmp/tf.zip
  - unzip /tmp/tf.zip -d /tmp
  - mv /tmp/terraform /usr/local/bin/terraform

# endregion TEMPLATES

# static python code analysis with pylint (pipeline will fail if quality is lower than expected one)
black:
  <<: *poetry_template
  only:
    - master
    - auto-merge
  image: python:3.6.2
  stage: check
  script:
    - poetry install -n -v
    - poetry run black --check --diff shape_dvaults_etl
# check terraform file quality
terraform:
  only:
    - master
    - auto-merge
  stage: check
  image:
    name: hashicorp/terraform:light
    entrypoint: [""]
  script:
    - cd deployments
    - terraform init
    - terraform workspace select dev || terraform workspace new dev
    - sterraform fmt -check
    - terraform validate

# run terraform unit tests
terraform_unit_test:
  only:
    - master
    - auto-merge
    - unit-test
  image: python:3.6.2
  stage: test
  before_script:
    - apt-get -y update && apt-get -y autoremove && apt-get clean && apt-get install -y unzip
    - *terraform_install_template
  script:
    - cd deployments
    - terraform init
    - terraform workspace select dev || terraform workspace new dev
    - terraform plan -out=plan.out
    - terraform show -json plan.out > plan.json
    - cd ../test
    - python -m unittest check_terraform_plan.py
# run python unit tests
python_unit_test:
  <<: *poetry_template
  only:
    - master
    - auto-merge
    - unit-test
  #image: amazon/aws-glue-libs:glue_libs_1.0.0_image_01
  image: python:3.6.2
  stage: test
  script:
    # - python -m aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    # - python -m aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    # - python -m aws configure set region "$AWS_DEFAULT_REGION"
    # - python -m aws configure set aws_profile "default"
    # - python -m aws configure set AWS_DEFAULT_PROFILE "default"
    # - cat ~/.aws/credentials
    - python -m unittest discover
# generates sphinx documentation and upload it to the docs bucket
sphinx_doc:
  <<: *poetry_template
  only:
    - master
    - sphinx-doc
  stage: doc
  script:
    - poetry install -n -v
    - sphinx-build -b html docs .sphinx_build
