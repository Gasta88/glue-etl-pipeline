# region MAIN_SETTINGS

default:
  image: amazon/aws-glue-libs:glue_libs_1.0.0_image_01

  tags:
    - ai-dev-multiple-runners

stages:
  - check
  - test
  - doc

# endregion MAIN_SETTINGS

# region TEMPLATES

.poetry_template: &poetry_template
  before_script:
    - export CONFIG_CACHE_DURATION=0.5
    - export POETRY_VERSION=1.1.11
    - export POETRY_HOME=./poetry
    - export PATH=$PATH:./poetry/bin
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python

# template to install terraform binaries
.terraform_install_template: &terraform_install_template
  - wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -O /tmp/tf.zip
  - unzip /tmp/tf.zip -d /tmp
  - mv /tmp/terraform /usr/local/bin/terraform

# endregion TEMPLATES

# static python code analysis with pylint (pipeline will fail if quality is lower than expected one)
pylint:
  <<: *poetry_template
  only:
    - master
    - auto-merge
  stage: check
  script:
    - git submodule add ../../ai/python-code-check.git
    - poetry install -n -v
    - poetry run pylint shape_dvaults_etl --rcfile=python-code-check/pylint.ini --fail-under=8

# check terraform file quality
terraform:
  only:
    - master
    - auto-merge
  stage: check
  image: hashicorp/terraform:light
  script:
    - cd deployments
    - terraform workspace new testing
    - terraform fmt -check
    - terraform validate

# run terraform unit tests
terraform_unit_test:
  only:
    - master
    - auto-merge
    - unit-test
  stage: test
  before_script:
    - *terraform_install_template
  script:
    - poetry install -n -v
    - cd deployments
    - terraform workspace new testing
    - terraform plan -out=plan.out
    - terraform show -json plan.out > plan.json
    - cd ../test
    - python -m unittest check_terraform_plan.py

# run python unit tests
python_unit_test:
  <<: *poetry_template
  only:
    - master
    - auto-merge
    - unit-test
  stage: test
  script:
    - poetry install -n -v
    - coverage run -m unittest discover
    - coverage report
    - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml

# generates sphinx documentation and upload it to the docs bucket
sphinx_doc:
  <<: *poetry_template
  only:
    - master
    - sphinx-doc
  stage: doc
  script:
    - poetry install -n -v
    - sphinx-build -b html docs .sphinx_build
